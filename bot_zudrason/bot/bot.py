import sys
import os
import django
import asyncio
from typing import Optional

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "bot_zudrason.settings")
django.setup()

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ContentType
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from django.core.files.base import ContentFile
from asgiref.sync import sync_to_async

from bot.models import Order

load_dotenv()
TOKEN = os.getenv("TOKEN")

if not TOKEN:
    raise ValueError("TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

GROUP_ID = -1002665268326  # ID –≥—Ä—É–ø–ø—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
COURIER_GROUP_ID = -1002648695686  # ID –≥—Ä—É–ø–ø—ã –∫—É—Ä—å–µ—Ä–æ–≤

# ======================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ======================

def get_main_menu():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¶ –ö—É—Ä—å–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏")],
            [KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å")],
            [KeyboardButton(text="üõµ –°—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º")]
        ],
        resize_keyboard=True,
        is_persistent=True
    )

def get_back_to_menu_button():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )

# ======================
# –°–û–°–¢–û–Ø–ù–ò–Ø
# ======================

class OrderForm(StatesGroup):
    from_address = State()
    to_address = State()
    phone = State()
    package_type = State()
    photo = State()

class PaymentForm(StatesGroup):
    waiting_for_receipt = State()
    confirm_payment = State()

class CourierStates(StatesGroup):
    waiting_for_courier_message = State()
    waiting_for_delivery_confirmation = State()
    waiting_for_delivery_message = State()
    waiting_for_client_confirmation = State()

class FeedbackStates(StatesGroup):
    waiting_for_feedback_choice = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ (–æ—Ç–∑—ã–≤/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
    waiting_for_feedback_text = State()    # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞

# ======================
# –ë–ê–ó–ê –î–ê–ù–ù–´–•
# ======================

@sync_to_async
def create_order(user_id: int, username: str, from_address: str, to_address: str, 
                phone: str, package_type: str, photo: Optional[ContentFile] = None, 
                photo_file_id: Optional[str] = None) -> int:
    order = Order(
        user_id=user_id,
        client_link=f"https://t.me/{username}" if username else None,
        from_address=from_address,
        to_address=to_address,
        phone=phone,
        package_type=package_type,
        status='pending'
    )
    
    if photo:
        order.photo.save(f"order_{user_id}_{order.id}.jpg", photo, save=False)
    if photo_file_id:
        order.photo_file_id = photo_file_id
    
    order.save()
    return order.id

@sync_to_async
def get_order_by_id(order_id: int) -> Optional[Order]:
    try:
        return Order.objects.get(id=order_id)
    except Order.DoesNotExist:
        return None

@sync_to_async
def set_order_price(order_id: int, price: float) -> None:
    order = Order.objects.get(id=order_id)
    order.price = price
    order.save()

@sync_to_async
def confirm_order(order_id: int) -> None:
    order = Order.objects.get(id=order_id)
    order.status = 'confirmed'
    order.save()

@sync_to_async
def assign_courier(order_id: int, courier_id: int, courier_username: str):
    order = Order.objects.get(id=order_id)
    order.courier_id = courier_id
    order.courier_link = f"https://t.me/{courier_username}" if courier_username else None
    order.status = 'assigned'
    order.save()
    return order

@sync_to_async
def update_order_status(order_id: int, status: str):
    order = Order.objects.get(id=order_id)
    order.status = status
    order.save()
    return order

@sync_to_async
def set_courier_message(order_id: int, message: str):
    order = Order.objects.get(id=order_id)
    order.courier_message = message
    order.save()
    return order

@sync_to_async
def set_delivery_message(order_id: int, message: str):
    order = Order.objects.get(id=order_id)
    order.delivery_message = message
    order.status = 'delivered'
    order.save()
    return order

# ======================
# –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
# ======================

@router.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Zudrason! üì¶\n"
        "–ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –µ–¥—É, –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –ø–æ—Å—ã–ª–∫–∏ –∏ –≤—Å—ë, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
        reply_markup=get_main_menu()
    )

@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(message: Message):
    await start(message)

# ======================
# –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ö–û–ú–ê–ù–î–´
# ======================

@router.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_us(message: Message):
    await message.answer(
        """üöÄ Zudrason ‚Äî —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∫—É—Ä—å–µ—Ä—Å–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏.
        –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º, —á—Ç–æ–±—ã –≤–∞—à–∏ –ø–æ—Å—ã–ª–∫–∏ –¥–æ—Ö–æ–¥–∏–ª–∏ –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ!""",
        reply_markup=get_main_menu()
    )

@router.message(F.text == "üõµ –°—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º")
async def become_courier(message: Message):
    await message.answer(
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º: @khurshedboboev",
        reply_markup=get_main_menu()
    )

# ======================
# –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê
# ======================

@router.message(F.text == "üì¶ –ö—É—Ä—å–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏")
async def start_order(message: Message, state: FSMContext):
    await message.answer(
        "üìç –û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å –ø–æ—Å—ã–ª–∫—É?"
    )
    await state.set_state(OrderForm.from_address)

@router.message(OrderForm.from_address)
async def process_from_address(message: Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main(message)
        await state.clear()
        return
        
    await state.update_data(from_address=message.text)
    await message.answer(
        "üìç –ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å?"
    )
    await state.set_state(OrderForm.to_address)

@router.message(OrderForm.to_address)
async def process_to_address(message: Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main(message)
        await state.clear()
        return
        
    await state.update_data(to_address=message.text)
    await message.answer(
        "üìû –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:"
    )
    await state.set_state(OrderForm.phone)

@router.message(OrderForm.phone)
async def process_phone(message: Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main(message)
        await state.clear()
        return
        
    await state.update_data(phone=message.text)
    await message.answer(
        "üì¶ –ß—Ç–æ –∑–∞ –ø–æ—Å—ã–ª–∫–∞? (–î–æ–∫—É–º–µ–Ω—Ç—ã, –µ–¥–∞, —Ç–µ—Ö–Ω–∏–∫–∞ –∏ —Ç.–¥.)"
    )
    await state.set_state(OrderForm.package_type)

@router.message(OrderForm.package_type)
async def process_package_type(message: Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main(message)
        await state.clear()
        return
        
    await state.update_data(package_type=message.text)
    await message.answer(
        "üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ—Å—ã–ª–∫–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ù–µ—Ç' –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç):",
        reply_markup=get_back_to_menu_button()
    )
    await state.set_state(OrderForm.photo)

async def send_order_to_group(
    bot: Bot,
    group_id: int,
    order_id: int,
    user_data: dict,
    message: Message,
    button_text: str,
    callback_prefix: str
):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ –≥—Ä—É–ø–ø—É"""
    order_text = (
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: @{message.from_user.username or message.from_user.full_name}\n"
        f"üìç –û—Ç–∫—É–¥–∞: {user_data['from_address']}\n"
        f"üìç –ö—É–¥–∞: {user_data['to_address']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
        f"üì¶ –¢–∏–ø: {user_data['package_type']}"
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=button_text, callback_data=f"{callback_prefix}:{order_id}")]
    ])

    if message.content_type == ContentType.PHOTO:
        await bot.send_photo(
            group_id,
            photo=message.photo[-1].file_id,
            caption=order_text,
            reply_markup=markup
        )
    else:
        await bot.send_message(group_id, order_text, reply_markup=markup)

@router.message(OrderForm.photo, F.content_type.in_({ContentType.PHOTO, ContentType.TEXT}))
async def process_photo(message: Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main(message)
        await state.clear()
        return
        
    user_data = await state.get_data()
    photo_file = None
    photo_file_id = None

    if message.content_type == ContentType.PHOTO:
        photo = message.photo[-1]
        photo_file_id = photo.file_id
        photo_file_obj = await bot.get_file(photo.file_id)
        file_bytes = await bot.download_file(photo_file_obj.file_path)
        photo_file = ContentFile(file_bytes.read(), name=f"order_{message.from_user.id}_{photo.file_id}.jpg")

    order_id = await create_order(
        user_id=message.from_user.id,
        username=message.from_user.username,
        from_address=user_data['from_address'],
        to_address=user_data['to_address'],
        phone=user_data['phone'],
        package_type=user_data['package_type'],
        photo=photo_file,
        photo_file_id=photo_file_id
    )

    await message.answer(
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.",
        reply_markup=get_main_menu()
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    await send_order_to_group(
        bot=bot,
        group_id=GROUP_ID,
        order_id=order_id,
        user_data=user_data,
        message=message,
        button_text="üí∞ –£–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É",
        callback_prefix="set_price"
    )

    await state.clear()

@router.callback_query(F.data.startswith("set_price:"))
async def request_price_input(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.update_data(order_id=order_id)
    await state.set_state("waiting_for_price")
    
    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}:"
    )
    await callback.answer()

@router.message(F.chat.id == GROUP_ID, F.text, StateFilter("waiting_for_price"))
async def process_price_input(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π",
        reply_markup=get_main_menu())
        
        state_data = await state.get_data()
        order_id = state_data.get('order_id')
        
        if not order_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–∫–∞–∑.",
        reply_markup=get_main_menu())
            return

        await set_order_price(order_id, price)
        order = await get_order_by_id(order_id)
        if not order:
            await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        reply_markup=get_main_menu())
            return

        client_message = (
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {price} —Å–æ–º–æ–Ω–∏.\n\n"
            f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–æ—Å—ã–ª–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:")

        confirm_markup = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")]],
            resize_keyboard=True
        )

        await bot.send_message(
            order.user_id,
            client_message,
            reply_markup=confirm_markup
        )

        await message.answer(
            f"‚úÖ –¶–µ–Ω–∞ {price} —Å–æ–º–æ–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}.\n"
            f"–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞."
        )

        await state.clear()

    except ValueError as e:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã: {str(e)}",
        reply_markup=get_main_menu())

@router.message(F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")
async def confirm_order_handler(message: Message):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–º
    payment_markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏")],
            [KeyboardButton(text="üì± –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ –æ–Ω–ª–∞–π–Ω-–∫–æ—à–µ–ª—ë–∫")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=payment_markup
    )

class PaymentForm(StatesGroup):
    waiting_for_receipt = State()
    confirm_payment = State()

# –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
PAYMENT_DETAILS = {
    "card_number": "1234567890118038",
    "phone_number": "+992501070777"
}

@router.message(F.text == "üì± –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ –æ–Ω–ª–∞–π–Ω-–∫–æ—à–µ–ª—ë–∫")
async def online_payment(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç—ã"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ QR-–∫–æ–¥ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª)
    payment_text = (
        "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n"
        f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{PAYMENT_DETAILS['card_number']}`\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {PAYMENT_DETAILS['phone_number']}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞
    receipt_markup = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –æ–ø–ª–∞—Ç—ã")]],
        resize_keyboard=True
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
    await message.answer(payment_text, reply_markup=receipt_markup)
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ QR-–∫–æ–¥–∞
    # await message.answer_photo(photo=open('qr_code.jpg', 'rb'))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —á–µ–∫–∞

@router.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –æ–ø–ª–∞—Ç—ã")
async def request_receipt(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ"""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å —á–µ–∫–æ–º:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(PaymentForm.waiting_for_receipt)

@router.message(F.text == "üíµ –ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏")
async def cash_payment(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ª–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        order = await sync_to_async(
            Order.objects.filter(user_id=message.from_user.id).last
        )()
        
        if not order:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤–∞—à –∑–∞–∫–∞–∑. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_main_menu())
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order.status = 'waiting_courier'
        await sync_to_async(order.save)()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É –∫—É—Ä—å–µ—Ä–æ–≤
        await send_order_to_group(
            bot=bot,
            group_id=COURIER_GROUP_ID,
            order_id=order.id,
            user_data={
                'from_address': order.from_address,
                'to_address': order.to_address,
                'phone': order.phone,
                'package_type': order.package_type
            },
            message=message,
            button_text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑",
            callback_prefix="courier_accept"
        )
        
        await message.answer(
            "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.\n\n"
            "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä—å–µ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –∫—É—Ä—å–µ—Ä –ø—Ä–∏–º–µ—Ç –∑–∞–∫–∞–∑.",
            reply_markup=ReplyKeyboardRemove()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–ª–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu()
        )
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞

@router.message(PaymentForm.waiting_for_receipt, F.content_type.in_({ContentType.PHOTO, ContentType.DOCUMENT}))
async def process_receipt(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —á–µ–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        order = await sync_to_async(
            Order.objects.filter(user_id=message.from_user.id).last
        )()
        
        if not order:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤–∞—à –∑–∞–∫–∞–∑. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
        reply_markup=get_main_menu())
            await state.clear()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data —Å user_id –∏ order_id
        callback_data_confirm = f"confirm_payment:{message.from_user.id}:{order.id}"
        callback_data_reject = f"reject_payment:{message.from_user.id}:{order.id}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        operator_markup = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", 
                    callback_data=callback_data_confirm
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", 
                    callback_data=callback_data_reject
                )
            ]
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        operator_text = (
            f"–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ:\n"
            f"–ó–∞–∫–∞–∑ #{order.id}\n"
            f"–ö–ª–∏–µ–Ω—Ç: @{message.from_user.username or '–Ω–µ—Ç'}\n"
            f"ID: {message.from_user.id}\n"
            f"–ò–º—è: {message.from_user.full_name}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        if message.content_type == ContentType.PHOTO:
            await bot.send_photo(
                GROUP_ID,
                photo=message.photo[-1].file_id,
                caption=operator_text,
                reply_markup=operator_markup
            )
        else:
            await bot.send_document(
                GROUP_ID,
                document=message.document.file_id,
                caption=operator_text,
                reply_markup=operator_markup
            )
        
        await message.answer(
            "–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
COURIER_GROUP_ID = -1002648695686  # ID –≥—Ä—É–ø–ø—ã –∫—É—Ä—å–µ—Ä–æ–≤

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
@sync_to_async
def assign_courier(order_id: int, courier_id: int, courier_username: str):
    order = Order.objects.get(id=order_id)
    order.courier_id = courier_id
    order.courier_link = f"https://t.me/{courier_username}" if courier_username else None
    order.status = 'assigned'
    order.save()
    return order

@sync_to_async
def update_order_status(order_id: int, status: str):
    order = Order.objects.get(id=order_id)
    order.status = status
    order.save()
    return order

@sync_to_async
def set_courier_message(order_id: int, message: str):
    order = Order.objects.get(id=order_id)
    order.courier_message = message
    order.save()
    return order

@sync_to_async
def set_delivery_message(order_id: int, message: str):
    order = Order.objects.get(id=order_id)
    order.delivery_message = message
    order.status = 'delivered'
    order.save()
    return order

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
class CourierStates(StatesGroup):
    waiting_for_courier_message = State()
    waiting_for_delivery_confirmation = State()
    waiting_for_delivery_message = State()
    waiting_for_client_confirmation = State()

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
@router.callback_query(F.data.startswith("confirm_payment:"))
async def handle_payment_confirmation(callback: CallbackQuery):
    try:
        _, user_id, order_id = callback.data.split(":")
        user_id = int(user_id)
        order_id = int(order_id)
        
        order = await sync_to_async(Order.objects.get)(id=order_id)
        order.status = 'paid'
        await sync_to_async(order.save)()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É –∫—É—Ä—å–µ—Ä–æ–≤
        order_text = (
            f"üöö –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ #{order.id}\n\n"
            f"üìç –û—Ç–∫—É–¥–∞: {order.from_address}\n"
            f"üìç –ö—É–¥–∞: {order.to_address}\n"
            f"üì¶ –¢–∏–ø: {order.package_type}\n"
            f"üí∞ –°—É–º–º–∞: {order.price} —Å–æ–º–æ–Ω–∏\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}"
        )
        
        accept_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"courier_accept:{order.id}")]
        ])
        
        await bot.send_message(
            COURIER_GROUP_ID,
            order_text,
            reply_markup=accept_markup
        )
        
        await callback.message.edit_reply_markup()
        await callback.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä—å–µ—Ä–∞–º")
        
        await bot.send_message(
            user_id,
            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä—å–µ—Ä–∞–º.\n"
            "–û–∂–∏–¥–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –∫—É—Ä—å–µ—Ä –ø—Ä–∏–º–µ—Ç –∑–∞–∫–∞–∑.",
            reply_markup=ReplyKeyboardRemove()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É –∫—É—Ä—å–µ—Ä–æ–≤
async def send_order_to_courier(order: Order):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∫—É—Ä—å–µ—Ä—É"""
    order_text = (
        f"üöö –ó–∞–∫–∞–∑ #{order.id}\n"
        f"üìç –û—Ç–∫—É–¥–∞: {order.from_address}\n"
        f"üìç –ö—É–¥–∞: {order.to_address}\n"
        f"üì¶ –¢–∏–ø: {order.package_type}\n"
        f"üí∞ –°—É–º–º–∞: {order.price} —Å–æ–º–æ–Ω–∏\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–±—ã—Ç–∏—è
    arrival_button = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="üìù –°–æ–æ–±—â–∏—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É",
            callback_data=f"courier_arrival:{order.id}"
        )
    ]])
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º file_id –µ—Å–ª–∏ –æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω)
    if order.photo and hasattr(order.photo, 'file_id'):
        try:
            await bot.send_photo(
                chat_id=order.courier_id,
                photo=order.photo.file_id,
                caption=order_text,
                reply_markup=arrival_button
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await bot.send_message(
                chat_id=order.courier_id,
                text=order_text,
                reply_markup=arrival_button
            )
    else:
        await bot.send_message(
            chat_id=order.courier_id,
            text=order_text,
            reply_markup=arrival_button
        )

# ======================
# –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ======================

@router.callback_query(F.data.startswith("courier_accept:"))
async def courier_accept_order(callback: CallbackQuery, state: FSMContext):
    try:
        order_id = int(callback.data.split(":")[1])
        courier = callback.from_user
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        order = await get_order_by_id(order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–Ω—è—Ç –ª–∏ —É–∂–µ –∑–∞–∫–∞–∑ –¥—Ä—É–≥–∏–º –∫—É—Ä—å–µ—Ä–æ–º
        if order.status != 'paid':
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –∫—É—Ä—å–µ—Ä–æ–º")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—å–µ—Ä–∞ –≤ –∑–∞–∫–∞–∑–µ
        order = await assign_courier(
            order_id=order_id,
            courier_id=courier.id,
            courier_username=courier.username
        )
        
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω—è—Ç—å" –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        await callback.answer("‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫—É—Ä—å–µ—Ä—É
        await send_order_to_courier(order)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        try:
            await bot.send_message(
                order.user_id,
                f"üöö –í–∞—à –∑–∞–∫–∞–∑ #{order.id} –ø—Ä–∏–Ω—è—Ç –∫—É—Ä—å–µ—Ä–æ–º.\n"
                f"–°–≤—è–∑—å —Å –∫—É—Ä—å–µ—Ä–æ–º: {order.courier_link or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                "–ö—É—Ä—å–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞")

@router.callback_query(F.data.startswith("courier_arrival:"))
async def courier_arrival(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.update_data(order_id=order_id)
    await callback.message.answer(
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç—É, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –ø—Ä–∏–±—É–¥–µ—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ë—É–¥—É —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç'):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(CourierStates.waiting_for_courier_message)
    await callback.answer()

@router.message(CourierStates.waiting_for_courier_message)
async def process_courier_message(message: Message, state: FSMContext):
    try:
        state_data = await state.get_data()
        order_id = state_data['order_id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        order = await set_courier_message(order_id, message.text)
        await update_order_status(order_id, 'in_progress')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await bot.send_message(
            order.user_id,
            f"üì¶ –ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏!\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞: {message.text}\n\n"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫—É—Ä—å–µ—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω. –ö–æ–≥–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç–µ –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="üöö –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É",
                    callback_data=f"courier_delivered:{order_id}"
                )
            ]])
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=get_main_menu())
        await state.clear()

@router.callback_query(F.data.startswith("courier_delivered:"))
async def courier_delivered(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.update_data(order_id=order_id)
    await callback.message.answer(
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç—É, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–Ø —É –ø–æ–¥—ä–µ–∑–¥–∞ –¥–æ–º–∞ 5'):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(CourierStates.waiting_for_delivery_message)
    await callback.answer()

@router.message(CourierStates.waiting_for_delivery_message)
async def process_delivery_message(message: Message, state: FSMContext):
    try:
        state_data = await state.get_data()
        order_id = state_data['order_id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        order = await set_delivery_message(order_id, message.text)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ",
                callback_data=f"client_confirm:{order.id}"
            )
        ]])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        try:
            await bot.send_message(
                chat_id=order.user_id,
                text=f"üöö –ö—É—Ä—å–µ—Ä –ø—Ä–∏–±—ã–ª –Ω–∞ –º–µ—Å—Ç–æ:\n\n"
                     f"–°–æ–æ–±—â–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞: {message.text}\n\n"
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ:",
                reply_markup=confirm_keyboard
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É. "
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é."
            )
            await state.clear()
            return
        
        await message.answer(
            "‚úÖ –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≤–∞—à–µ–º –ø—Ä–∏–±—ã—Ç–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=get_main_menu()
        )
        
        await state.clear()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
            reply_markup=get_main_menu()
        )
        await state.clear()

@router.callback_query(F.data.startswith("client_confirm:"))
async def handle_client_confirmation(callback: CallbackQuery):
    try:
        order_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        order = await sync_to_async(Order.objects.get)(id=order_id)
        order.status = 'delivered'
        await sync_to_async(order.save)()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫—É—Ä—å–µ—Ä–∞
        try:
            await bot.send_message(
                chat_id=order.courier_id,
                text=f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order.id}!\n"
                     "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∫–ª–∏–µ–Ω—Ç–∞
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer(
            "‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤–∏—Å!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚≠êÔ∏è 1", callback_data=f"rate:1:{order_id}")],
                [InlineKeyboardButton(text="‚≠êÔ∏è 2", callback_data=f"rate:2:{order_id}")],
                [InlineKeyboardButton(text="‚≠êÔ∏è 3", callback_data=f"rate:3:{order_id}")],
                [InlineKeyboardButton(text="‚≠êÔ∏è 4", callback_data=f"rate:4:{order_id}")],
                [InlineKeyboardButton(text="‚≠êÔ∏è 5", callback_data=f"rate:5:{order_id}")]
            ])
        )
        
        await callback.answer()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏")


@router.callback_query(F.data.startswith("rate:"))
async def process_rating(callback: CallbackQuery, state: FSMContext):
    try:
        _, rating, order_id = callback.data.split(":")
        rating = int(rating)
        order_id = int(order_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
        await sync_to_async(Order.objects.filter(id=order_id).update)(
            client_score=rating
        )
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
        feedback_markup = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"give_feedback:{order_id}"),
                InlineKeyboardButton(text="üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_feedback:{order_id}")
            ]
        ])
        
        await callback.message.edit_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤?",
            reply_markup=feedback_markup
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(order_id=order_id)
        await state.set_state(FeedbackStates.waiting_for_feedback_choice)
        
        await callback.answer()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ü–µ–Ω–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("give_feedback:"), FeedbackStates.waiting_for_feedback_choice)
async def request_feedback(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:",
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        await state.set_state(FeedbackStates.waiting_for_feedback_text)
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç–∑—ã–≤–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("skip_feedback:"), FeedbackStates.waiting_for_feedback_choice)
async def skip_feedback(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!")
        await state.clear()
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –æ—Ç–∑—ã–≤–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(FeedbackStates.waiting_for_feedback_text)
async def save_feedback_text(message: Message, state: FSMContext):
    try:
        state_data = await state.get_data()
        order_id = state_data['order_id']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
        await sync_to_async(Order.objects.filter(id=order_id).update)(
            client_feedback=message.text
        )
        
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.", reply_markup=get_main_menu())
        await state.clear()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())
        await state.clear()

@router.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def contact_operator(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    await message.answer(
        "–î–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ @zudrason_operator\n"
        "–∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É +992123456789",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(F.text == "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")
async def retry_payment(message: Message):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã"""
    await online_payment(message)

async def main():
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())